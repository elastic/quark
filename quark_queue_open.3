.Dd $Mdocdate$
.Dt QUARK_QUEUE_OPEN 3
.Os
.Sh NAME
.Nm quark_queue_open
.Nd initialize a
.Vt quark_queue
.Sh SYNOPSIS
.In quark.h
.Ft int
.Fn quark_queue_open "struct quark_queue *qq" "struct quark_queue_attr *attr"
.Sh DESCRIPTION
.Nm
initializes the
.Vt quark_queue
pointed to by
.Fa qq
with the attributes pointed to by
.Fa attr .
.Pp
A
.Vt quark_queue
is the main runtime datastructure of quark, it is loosely called a queue as it's
where events will originate from.
Events will be collected into the queue, buffered, aggregated and filtered if
necessary.
.Pp
The
.Nm
function does the following:
.Bl -bullet
.It
Attempts to use the best backend available unless otherwise especified.
This includes loading the EBPF programs for EBPF or the probes for KPROBES.
Only one backend is used and it defaults to EBPF and falls back to KPROBE.
.It
On its first call it will also initialize global host state, like BTF offsets
and HZ.
.It
Initializes the various lists and internal buffers of
.Fa qq .
.It
If KPROBES is selected, it initializes one perf-ring per-cpu in order to
collect process events, see
.Xr quark_queue_get_epollfd 3
and
.Xr quark_queue_block 3 .
.It
If EBPF is selected, it initializes an EBPF ringbuffer, support for
old style perf-rings with EBPF is currently not supported.
.It
Scrapes
.Pa /proc
for a snapshot of the existing processes in the system.
.Nm
is smart enough to open the rings before the scraping, as to be make sure no
process is lost.
These initial process events will be available on the first call to
.Xr quark_queue_get_events 3
with the
.Vt events
member set to
.Dv QUARK_EV_SNAPSHOT .
.El
.Pp
Default queue behaviour can be tweaked with
.Fa attr .
A default configuration for tweaking can be acquired via
.Xr quark_queue_default_attr 3 .
In case
.Fa attr
is NULL, the default configuration is used.
.Pp
.Fa struct quark_queue_attr
is defined as:
.Bd -literal -offset indent
struct quark_queue_attr {
	int	 flags;
	int	 max_length;
	int	 cache_grace_time;	/* in milliseconds */
	int	 hold_time;		/* in milliseconds */
	...
};
.Ed
.Bl -tag -width "max_length"
.It Em flags
Bitmask of:
.Bl -tag -width QQ_THREAD_EVENTS
.It Dv QQ_EBPF
Enable the EBPF backend.
EBPF is attempted first and falls back to KPROBE if both were specified.
.It Dv QQ_KPROBE
Enable the KPROBE backend, see above.
.It Dv QQ_ALL_BACKENDS
Shorthand for (QQ_EBPF | QQ_KPROBE).
.It Dv QQ_THREAD_EVENTS
Include per-thread events, instead of per-process events.
This option will be removed in the future, but it may be useful for debugging.
.It Dv QQ_NO_SNAPSHOT
Don't send the initial snapshot of existing processes.
.It Dv QQ_MIN_AGG
Don't aggregate
.Em fork ,
.Em exec
and
.Em exit ,
perform only minimal aggregation.
.It Dv QQ_ENTRY_LEADER
Include
.Em proc_entry_leader
and
.Em proc_entry_type
in
.Em quark_events .
Entry leader is how the process entered the system, it is disabled by default as
it is Elastic/ECS specific.
.El
.It Em max_length
The maximum size of the internal buffering queue in number of events.
.Pp
Quark buffers each event for a computed interval in order to sort and aggregate
multiple events into one.
The closer the queue is to being full, the smaller the interval: until quark
decides to not buffer events at all.
.It Em cache_grace_time
The grace period for removing an event from the cache.
.Pp
When a process exits, it is removed from the cache, but only after
.Em cache_grace_time ,
this gives the user a small window where it can still query a terminated process
via
.Xr quark_process_lookup 3 .
.It Em hold_time
How long to buffer (hold) an event before delivering it to the user via
.Xr quark_queue_get_events 3 .
.Pp
Events received from the backend are not immediately forwarded to the user, this
allows multiple events to be aggregated as well as ordered by time.
In case quark is overloaded, it will use a stepping function where
.Em hold_time
decreases the more loaded it is.
.Pp
Details are described in
.Xr quark 7 .
.El
.Sh RETURN VALUES
Zero on success, -1 otherwise and
.Va errno
is set.
In the case of an error, the internal state is cleared up and a
.Xr quark_queue_close 3
should NOT be issued.
.Sh SEE ALSO
.Xr quark_event_dump 3 ,
.Xr quark_process_lookup 3 ,
.Xr quark_queue_block 3 ,
.Xr quark_queue_close 3 ,
.Xr quark_queue_default_attr 3 ,
.Xr quark_queue_get_epollfd 3 ,
.Xr quark_queue_get_events 3 ,
.Xr quark_queue_get_stats 3 ,
.Xr quark 7 ,
.Xr quark-btf 8 ,
.Xr quark-mon 8
