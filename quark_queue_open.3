.Dd $Mdocdate$
.Dt QUARK_QUEUE_OPEN 3
.Os
.Sh NAME
.Nm quark_queue_open
.Nd initialize a
.Vt quark_queue
.Sh SYNOPSIS
.In quark.h
.Ft int
.Fn quark_queue_open "struct quark_queue *qq" "int flags"
.Sh DESCRIPTION
.Nm
initializes the
.Vt quark_queue
pointed to by
.Fa qq .
.Pp
A
.Vt quark_queue
is the main runtime datastructure of quark, it is loosely called a queue as it's
where events will originate from.
Events will be collected into the queue, buffered, aggregated and filtered if
necessary.
.Pp
The
.Nm
function does the following:
.Bl -bullet
.It
Attempts to use the best backend available unless otherwise especified.
This includes loading the EBPF programs for EBPF or the probes for KPROBES.
Only one backend is used and it defaults to EBPF and fallsback to KPROBE.
.It
On its first call it will also initialize global host state, like BTF offsets
and HZ.
.It
Initializes the various lists and internal buffers of
.Fa qq .
.It
If KPROBES is selected, it initializes one perf-ring per-cpu in order to
collect process events, see
.Xr quark_queue_get_epollfd 3
and
.Xr quark_queue_block 3 .
.It
If EBPF is selected, it initializes an EBPF ringbuffer, support for
old style perf-rings with EBPF is currently not supported.
.It
Scrapes
.Pa /proc
for a snapshot of the existing processes in the system.
.Nm
is smart enough to open the rings before the scraping, as to be make sure no
process is lost.
These initial process events will be available on the first call to
.Xr quark_queue_get_events 3
with the
.Vt events
member set to
.Dv QUARK_EV_SNAPSHOT .
.El
.Pp
.Fa flags
is a bitmask that changes the default queue behaviour with the following values:
.Pp
.Bl -tag -width QQ_THREAD_EVENTS -offset indent -compact
.It Dv QQ_EBPF
Enable the EBPF backend, in case neither
.Dv QQ_EBPF
or
.Dv QQ_KPROBE
are specified, it defaults to both.
EBPF is attempted first and fallsback to KPROBE if it failed.
.It Dv QQ_KPROBE
Enable the KPROBE backend, see above.
.It Dv QQ_THREAD_EVENTS
Include per-thread events, instead of per-process events.
This option will be removed in the future, but it may be useful for debugging.
.It Dv QQ_NO_CACHE
Don't use the internal process cache to enrich events, normally when quark
receives an event, it will include all the cached information it had about that
process so that the event has more context, passing this flag will get you
"naked" events.
.El
.Sh RETURN VALUES
Zero on success, -1 otherwise and
.Va errno
is set.
In the case of an error, the internal state is cleared up and a
.Xr quark_queue_close 3
should NOT be issued.
.Sh SEE ALSO
.Xr quark_event_dump 3 ,
.Xr quark_event_lookup 3 ,
.Xr quark_queue_block 3 ,
.Xr quark_queue_close 3 ,
.Xr quark_queue_get_epollfd 3 ,
.Xr quark_queue_get_events 3 ,
.Xr quark_queue_get_stats 3 ,
.Xr quark 7 ,
.Xr quark-btf 8 ,
.Xr quark-mon 8
.Sh CAVEATS
Multiple queues are supported, but discouraged.
Opening and closing (but not using!) queues from different
threads must be synchronized by the caller, this is because there is global
internal state that might change in
.Nm
and
.Xr quark_queue_close 3 .
Notably there is a single KPROBE installation shared by all queues.
